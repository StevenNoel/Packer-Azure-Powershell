variable "AZURE_CLIENT_ID" {
  type      = string
  default   = "${env("AZURE_CLIENT_ID")}"
  sensitive = true
}

variable "AZURE_CLIENT_SECRET" {
  type      = string
  default   = "${env("AZURE_CLIENT_SECRET")}"
  sensitive = true
}

variable "AZURE_MDT" {
  type      = string
  default   = "${env("AZURE_MDT")}"
  sensitive = true
}

variable "AZURE_LOCALUSER" {
  type      = string
  default   = "${env("AZURE_LOCALUSER")}"
  sensitive = true
}

variable "managed_image_name" {
  type    = string
  default = "citrix-packer-image"
}

variable "subscription_id" {
  type    = string
  default = "<azure subscription id>"
}

variable "temp_compute_name" {
  type    = string
  default = "CTXAZPK16VDA001"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

# 1 error occurred upgrading the following block:
# unhandled "lower" call:
# there is no way to automatically upgrade the "lower" call.
# Please manually upgrade to `lower(var.example)`
# Visit https://www.packer.io/docs/templates/hcl_templates/functions/string/lower for more infos.

source "azure-arm" "autogenerated_1" {
  azure_tags = {
    application = "citrix"
  }
  #Azure Info
  subscription_id                        = "${var.subscription_id}"
  client_id                              = "${var.AZURE_CLIENT_ID}"
  client_secret                          = "${var.AZURE_CLIENT_SECRET}"
  cloud_environment_name                 = "AzureUSGovernmentCloud"  
  
  #Packer Azure
  build_resource_group_name              = "<azure resource grouop>"
  custom_resource_build_prefix           = "ctxpk"
  managed_image_name                     = "${var.managed_image_name}-${formatdate("YYYY-MM-DD-hhmm-0700",timestamp())}"
  managed_image_resource_group_name      = "<azure resource group>"
  managed_image_storage_account_type     = "Premium_LRS"
  
  #Azure Marketplace Sku
  os_type                                = "Windows"
  image_offer                            = "WindowsServer"
  image_publisher                        = "MicrosoftWindowsServer"
  image_sku                              = "2016-datacenter-gensecond"
  image_version                          = "latest"

  #VM details
  private_virtual_network_with_public_ip = false
  #temp_compute_name                      = "${var.temp_compute_name}${legacy_isotime("06010203")}"
  temp_compute_name                      = "${var.temp_compute_name}"
  virtual_network_name                   = "<azure virtual network>"
  virtual_network_resource_group_name    = "<azure resource group>"
  virtual_network_subnet_name            = "<azure subnet name>"
  vm_size                                = "Standard_B4ms"
  
  #WinRM
  communicator                           = "winrm"
  winrm_insecure                         = "true"
  winrm_timeout                          = "5m"
  winrm_use_ssl                          = "true"
  winrm_username                         = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "powershell" {
    inline = ["while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }", "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }", "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12", "Start-sleep -s 5"]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"&amp; {Write-Output 'Machine restarted1.'}\""
  }

  provisioner "powershell" {
    environment_vars = ["AZURE_LOCALUSER=${var.AZURE_LOCALUSER}"]
    scripts          = ["./Azure-Packer-PreReqs.ps1"]
    valid_exit_codes = [0, 1, 3010]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"&amp; {Write-Output 'Machine restarted2.'}\""
  }

  provisioner "powershell" {
    environment_vars = ["Azure_MDT=${var.AZURE_MDT}"]
    scripts          = ["./Azure-Packer-Base.ps1"]
    elevated_user  = "Administrator"
    elevated_password = "${var.AZURE_LOCALUSER}"
    valid_exit_codes = [0, 1, 3010]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"&amp; {Write-Output 'Machine restarted3.'}\""
    restart_timeout = "20m"
  }

  provisioner "powershell" {
    environment_vars = ["Azure_MDT=${var.AZURE_MDT}"]
    scripts          = ["./Azure-Packer-Citrix-Installs.ps1"]
    elevated_user  = "Administrator"
    elevated_password = "${var.AZURE_LOCALUSER}"
    valid_exit_codes = [0, 1, 3, 3010]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"&amp; {Write-Output 'Machine restarted4.'}\""
    restart_timeout = "20m"
  }

  provisioner "powershell" {
    environment_vars = ["Azure_MDT=${var.AZURE_MDT}"]
    scripts          = ["./Azure-Packer-Global-App-Installs-1.ps1"]
    elevated_user  = "Administrator"
    elevated_password = "${var.AZURE_LOCALUSER}"
    valid_exit_codes = [0, 1, 3, 3010]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"&amp; {Write-Output 'Machine restarted5.'}\""
    restart_timeout = "20m"
  }

  provisioner "powershell" {
    environment_vars = ["Azure_MDT=${var.AZURE_MDT}"]
    scripts          = ["./Azure-Packer-SecurityAgent-Installs-1.ps1"]
    elevated_user  = "Administrator"
    elevated_password = "${var.AZURE_LOCALUSER}"
    valid_exit_codes = [0, 1, 3, 3010]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"&amp; {Write-Output 'Machine restarted6.'}\""
    restart_timeout = "20m"
  }

  provisioner "powershell" {
    environment_vars = ["Azure_MDT=${var.AZURE_MDT}"]
    scripts          = ["./Azure-Packer-Final-Seal-2.ps1"]
    elevated_user  = "Administrator"
    elevated_password = "${var.AZURE_LOCALUSER}"
    valid_exit_codes = [0, 1, 3, 3010]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"&amp; {Write-Output 'Machine restarted7.'}\""
    restart_timeout = "20m"
  }

  provisioner "powershell" {
    inline = ["while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }", "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }", "Set-ExecutionPolicy Bypass -Scope Process -Force", "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12", "Start-sleep -s 5", "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit", "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"]
  }

  post-processor "manifest" {
    output     = "./manifests/manifest-${legacy_isotime("2006-01-02-0304")}.json"
    strip_path = true
  }
}
